{"ast":null,"code":"/**\n * `InternalOAuthError` error.\n *\n * InternalOAuthError wraps errors generated by node-oauth.  By wrapping these\n * objects, error messages can be formatted in a manner that aids in debugging\n * OAuth issues.\n *\n * @constructor\n * @param {String} [message]\n * @param {Object|Error} [err]\n * @api public\n */\nfunction InternalOAuthError(message, err) {\n  Error.call(this);\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n  this.message = message;\n  this.oauthError = err;\n}\n/**\n * Inherit from `Error`.\n */\n\n\nInternalOAuthError.prototype.__proto__ = Error.prototype;\n/**\n * Returns a string representing the error.\n *\n * @return {String}\n * @api public\n */\n\nInternalOAuthError.prototype.toString = function () {\n  var m = this.name;\n\n  if (this.message) {\n    m += ': ' + this.message;\n  }\n\n  if (this.oauthError) {\n    if (this.oauthError instanceof Error) {\n      m = this.oauthError.toString();\n    } else if (this.oauthError.statusCode && this.oauthError.data) {\n      m += ' (status: ' + this.oauthError.statusCode + ' data: ' + this.oauthError.data + ')';\n    }\n  }\n\n  return m;\n};\n/**\n * Expose `InternalOAuthError`.\n */\n\n\nmodule.exports = InternalOAuthError;","map":null,"metadata":{},"sourceType":"script"}