{"ast":null,"code":"var uid = require('uid2');\n/**\n * Creates an instance of `SessionStore`.\n *\n * This is the state store implementation for the OAuth2Strategy used when\n * the `state` option is enabled.  It generates a random state and stores it in\n * `req.session` and verifies it when the service provider redirects the user\n * back to the application.\n *\n * This state store requires session support.  If no session exists, an error\n * will be thrown.\n *\n * Options:\n *\n *   - `key`  The key in the session under which to store the state\n *\n * @constructor\n * @param {Object} options\n * @api public\n */\n\n\nfunction SessionStore(options) {\n  if (!options.key) {\n    throw new TypeError('Session-based state store requires a session key');\n  }\n\n  this._key = options.key;\n}\n/**\n * Store request state.\n *\n * This implementation simply generates a random string and stores the value in\n * the session, where it will be used for verification when the user is\n * redirected back to the application.\n *\n * @param {Object} req\n * @param {Function} callback\n * @api protected\n */\n\n\nSessionStore.prototype.store = function (req, callback) {\n  if (!req.session) {\n    return callback(new Error('OAuth 2.0 authentication requires session support when using state. Did you forget to use express-session middleware?'));\n  }\n\n  var key = this._key;\n  var state = uid(24);\n\n  if (!req.session[key]) {\n    req.session[key] = {};\n  }\n\n  req.session[key].state = state;\n  callback(null, state);\n};\n/**\n * Verify request state.\n *\n * This implementation simply compares the state parameter in the request to the\n * value generated earlier and stored in the session.\n *\n * @param {Object} req\n * @param {String} providedState\n * @param {Function} callback\n * @api protected\n */\n\n\nSessionStore.prototype.verify = function (req, providedState, callback) {\n  if (!req.session) {\n    return callback(new Error('OAuth 2.0 authentication requires session support when using state. Did you forget to use express-session middleware?'));\n  }\n\n  var key = this._key;\n\n  if (!req.session[key]) {\n    return callback(null, false, {\n      message: 'Unable to verify authorization request state.'\n    });\n  }\n\n  var state = req.session[key].state;\n\n  if (!state) {\n    return callback(null, false, {\n      message: 'Unable to verify authorization request state.'\n    });\n  }\n\n  delete req.session[key].state;\n\n  if (Object.keys(req.session[key]).length === 0) {\n    delete req.session[key];\n  }\n\n  if (state !== providedState) {\n    return callback(null, false, {\n      message: 'Invalid authorization request state.'\n    });\n  }\n\n  return callback(null, true);\n}; // Expose constructor.\n\n\nmodule.exports = SessionStore;","map":null,"metadata":{},"sourceType":"script"}