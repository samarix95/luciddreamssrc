{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\yunsamar\\\\Documents\\\\git\\\\LucidDream\\\\lucid_dream\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\yunsamar\\\\Documents\\\\git\\\\LucidDream\\\\lucid_dream\\\\src\\\\components\\\\Sign.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { setLogin } from '../actions/Actions';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport Slide from '@material-ui/core/Slide';\nimport Grid from '@material-ui/core/Grid';\nimport { mdiVk } from '@mdi/js';\nimport Icon from '@mdi/react';\nimport passport from 'passport';\n\nconst VKontakteStrategy = require('passport-vkontakte').Strategy;\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return React.createElement(Slide, Object.assign({\n    direction: \"up\",\n    ref: ref\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }));\n});\n\nconst mapStateToProps = store => {\n  return {\n    store\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setLoginAction: loginState => dispatch(setLogin(loginState))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Sign);\n\nfunction Sign(props) {\n  const setLoginAction = props.setLoginAction;\n  const _props$store = props.store,\n        lang = _props$store.lang,\n        themeMode = _props$store.themeMode;\n\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        openLogin = _React$useState2[0],\n        setOpenLogin = _React$useState2[1];\n\n  const checkLoginState = response => {\n    console.log(response);\n\n    if (response.status === 'connected') {\n      window.VK.Api.call('users.get', {\n        user_ids: response.session.mid,\n        v: \"5.103\",\n        fields: \"sex, bdate, city, country, has_photo, photo_50, photo_100, photo_200_orig, photo_200, photo_400_orig, photo_max, photo_max_orig, domain, timezone, screen_name, crop_photo\"\n      }, function (r) {\n        console.log(r.response[0]);\n        setLoginAction(true);\n      });\n    }\n  };\n\n  const click = action => {\n    switch (action) {\n      case 'useVk':\n        window.VK.Auth.login(checkLoginState, 4194304);\n        passport.use(new VKontakteStrategy({\n          clientID: 7227007,\n          clientSecret: 'Q8lAKUXmmZfeGYD2rQZx',\n          callbackURL: \"http://localhost:3000/auth/vkontakte/callback\"\n        }, function (accessToken, refreshToken, params, profile, done) {\n          // console.log(params.email); // getting the email\n          Sign.findOrCreate({\n            vkontakteId: profile.id\n          }, function (err, user) {\n            return done(err, user);\n          });\n        }));\n        break;\n\n      case 'openLogin':\n        setOpenLogin(true);\n        break;\n\n      case 'closeLogin':\n        setOpenLogin(false);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    className: props.classes.menuButtonContainerItem,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(Dialog, {\n    open: openLogin,\n    TransitionComponent: Transition,\n    keepMounted: true,\n    onClose: () => {\n      click('closeLogin');\n    },\n    \"aria-labelledby\": \"alert-dialog-slide-title\",\n    \"aria-describedby\": \"alert-dialog-slide-description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"alert-dialog-slide-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, lang.currLang.buttons.signIn), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    className: props.classes.menuButtonContainerItem,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 2,\n    className: props.classes.menuDivButton,\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(TextField //className={classes.textField}\n  , {\n    id: \"email-field\",\n    type: \"email\",\n    label: \"Email\" //value={values.email}\n    //onChange={handleChangeEmail}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 2,\n    className: props.classes.menuDivButton,\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(TextField //id=\"password-field\"\n  //className={classes.textField}\n  //type={values.showPassword ? 'text' : 'password'}\n  , {\n    label: lang.currLang.texts.password //value={values.password}\n    //onChange={handleChangePassword}\n    // InputProps={{\n    //     endAdornment: (\n    //         <InputAdornment position=\"end\">\n    //             <IconButton\n    //                 tabIndex=\"-1\"\n    //                 edge=\"end\"\n    //                 aria-label=\"toggle password visibility\"\n    //                 onClick={handleClickShowPassword}\n    //                 onMouseDown={handleMouseDownPassword}\n    //             >\n    //                 {values.showPassword ? <VisibilityOff /> : <Visibility />}\n    //             </IconButton>\n    //         </InputAdornment>\n    //     ),\n    // }}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 2,\n    className: props.classes.menuDivButton,\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, lang.currLang.texts.or)), React.createElement(Grid, {\n    item: true,\n    xs: 2,\n    className: props.classes.menuDivButton,\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    className: props.classes.button,\n    onClick: () => {\n      click('useVk');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    path: mdiVk,\n    size: 2,\n    color: themeMode.palette.type === 'light' ? 'rgba(0, 0, 0, 0.54)' : 'rgba(255, 255, 255, 1)',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }))))), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: () => {\n      click('closeLogin');\n    },\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, lang.currLang.buttons.cancel), React.createElement(Button, {\n    onClick: () => {\n      click('closeLogin');\n    },\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, lang.currLang.buttons.signIn))), React.createElement(Grid, {\n    item: true,\n    xs: 2,\n    className: props.classes.menuDivButton,\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    className: props.classes.menuButton,\n    onClick: () => {\n      click('openLogin');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, lang.currLang.buttons.signIn)), React.createElement(Grid, {\n    item: true,\n    xs: 2,\n    className: props.classes.menuDivButton,\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    className: props.classes.menuButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, lang.currLang.buttons.signUp)), React.createElement(Grid, {\n    item: true,\n    xs: 2,\n    className: props.classes.menuDivButton,\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    item: true,\n    xs: 2,\n    className: props.classes.menuDivButton,\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    className: props.classes.menuButton,\n    onClick: () => props.onMenuClick('openAboutPage'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, lang.currLang.buttons.about)));\n}\n\nSign.propTypes = {\n  setLoginAction: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["C:/Users/yunsamar/Documents/git/LucidDream/lucid_dream/src/components/Sign.js"],"names":["React","PropTypes","connect","setLogin","DialogActions","DialogContent","DialogTitle","IconButton","Typography","TextField","Button","Dialog","Slide","Grid","mdiVk","Icon","passport","VKontakteStrategy","require","Strategy","Transition","forwardRef","props","ref","mapStateToProps","store","mapDispatchToProps","dispatch","setLoginAction","loginState","Sign","lang","themeMode","useState","openLogin","setOpenLogin","checkLoginState","response","console","log","status","window","VK","Api","call","user_ids","session","mid","v","fields","r","click","action","Auth","login","use","clientID","clientSecret","callbackURL","accessToken","refreshToken","params","profile","done","findOrCreate","vkontakteId","id","err","user","classes","menuButtonContainerItem","currLang","buttons","signIn","menuDivButton","texts","password","or","button","palette","type","cancel","menuButton","signUp","onMenuClick","about","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { setLogin } from '../actions/Actions';\r\n\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { mdiVk } from '@mdi/js';\r\nimport Icon from '@mdi/react';\r\n\r\nimport passport from 'passport';\r\nconst VKontakteStrategy = require('passport-vkontakte').Strategy;\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        store,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setLoginAction: loginState => dispatch(setLogin(loginState)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Sign)\r\n\r\nfunction Sign(props) {\r\n    const { setLoginAction, } = props;\r\n    const { lang, themeMode, } = props.store;\r\n\r\n    const [openLogin, setOpenLogin] = React.useState(false);\r\n\r\n    const checkLoginState = (response) => {\r\n        console.log(response);\r\n        if (response.status === 'connected') {\r\n            window.VK.Api.call('users.get', { user_ids: response.session.mid, v: \"5.103\", fields: \"sex, bdate, city, country, has_photo, photo_50, photo_100, photo_200_orig, photo_200, photo_400_orig, photo_max, photo_max_orig, domain, timezone, screen_name, crop_photo\" }, function (r) {\r\n                console.log(r.response[0]);\r\n                setLoginAction(true);\r\n            });\r\n        }\r\n    };\r\n\r\n    const click = (action) => {\r\n        switch (action) {\r\n            case 'useVk':\r\n                window.VK.Auth.login(checkLoginState, 4194304);\r\n                passport.use(new VKontakteStrategy({\r\n                    clientID: 7227007,\r\n                    clientSecret: 'Q8lAKUXmmZfeGYD2rQZx',\r\n                    callbackURL: \"http://localhost:3000/auth/vkontakte/callback\"\r\n                },\r\n                    function (accessToken, refreshToken, params, profile, done) {\r\n                        // console.log(params.email); // getting the email\r\n                        Sign.findOrCreate({ vkontakteId: profile.id }, function (err, user) {\r\n                            return done(err, user);\r\n                        });\r\n                    }\r\n                ));\r\n                break;\r\n            case 'openLogin':\r\n                setOpenLogin(true);\r\n                break;\r\n            case 'closeLogin':\r\n                setOpenLogin(false);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12} className={props.classes.menuButtonContainerItem}>\r\n            <Dialog\r\n                open={openLogin}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={() => { click('closeLogin') }}\r\n                aria-labelledby=\"alert-dialog-slide-title\"\r\n                aria-describedby=\"alert-dialog-slide-description\" >\r\n                <DialogTitle id=\"alert-dialog-slide-title\">\r\n                    {lang.currLang.buttons.signIn}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Grid item xs={12} className={props.classes.menuButtonContainerItem}>\r\n\r\n                        <Grid item xs={2} className={props.classes.menuDivButton} align=\"center\">\r\n                            <TextField\r\n                                //className={classes.textField}\r\n                                id=\"email-field\"\r\n                                type=\"email\"\r\n                                label=\"Email\"\r\n                            //value={values.email}\r\n                            //onChange={handleChangeEmail}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={2} className={props.classes.menuDivButton} align=\"center\">\r\n                            <TextField\r\n                                //id=\"password-field\"\r\n                                //className={classes.textField}\r\n                                //type={values.showPassword ? 'text' : 'password'}\r\n                                label={lang.currLang.texts.password}\r\n                            //value={values.password}\r\n                            //onChange={handleChangePassword}\r\n                            // InputProps={{\r\n                            //     endAdornment: (\r\n                            //         <InputAdornment position=\"end\">\r\n                            //             <IconButton\r\n                            //                 tabIndex=\"-1\"\r\n                            //                 edge=\"end\"\r\n                            //                 aria-label=\"toggle password visibility\"\r\n                            //                 onClick={handleClickShowPassword}\r\n                            //                 onMouseDown={handleMouseDownPassword}\r\n                            //             >\r\n                            //                 {values.showPassword ? <VisibilityOff /> : <Visibility />}\r\n                            //             </IconButton>\r\n                            //         </InputAdornment>\r\n                            //     ),\r\n                            // }}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={2} className={props.classes.menuDivButton} align=\"center\">\r\n                            <Typography>\r\n                                {lang.currLang.texts.or}\r\n                            </Typography>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={2} className={props.classes.menuDivButton} align=\"center\">\r\n                            <IconButton className={props.classes.button} onClick={() => { click('useVk') }}>\r\n                                <Icon path={mdiVk} size={2} color={themeMode.palette.type === 'light' ? 'rgba(0, 0, 0, 0.54)' : 'rgba(255, 255, 255, 1)'} />\r\n                            </IconButton>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => { click('closeLogin') }} color=\"primary\">\r\n                        {lang.currLang.buttons.cancel}\r\n                    </Button>\r\n                    <Button onClick={() => { click('closeLogin') }} color=\"primary\">\r\n                        {lang.currLang.buttons.signIn}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Grid item xs={2} className={props.classes.menuDivButton} align=\"center\">\r\n                <Button variant=\"contained\" color=\"primary\" className={props.classes.menuButton} onClick={() => { click('openLogin') }}>\r\n                    {lang.currLang.buttons.signIn}\r\n                </Button>\r\n            </Grid>\r\n\r\n            <Grid item xs={2} className={props.classes.menuDivButton} align=\"center\">\r\n                <Button variant=\"contained\" color=\"primary\" className={props.classes.menuButton}>\r\n                    {lang.currLang.buttons.signUp}\r\n                </Button>\r\n            </Grid>\r\n\r\n            <Grid item xs={2} className={props.classes.menuDivButton} align=\"center\"></Grid>\r\n\r\n            <Grid item xs={2} className={props.classes.menuDivButton} align=\"center\">\r\n                <Button variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={props.classes.menuButton}\r\n                    onClick={() => (props.onMenuClick('openAboutPage'))} >\r\n                    {lang.currLang.buttons.about}\r\n                </Button>\r\n            </Grid>\r\n\r\n        </Grid>\r\n    )\r\n}\r\n\r\nSign.propTypes = {\r\n    setLoginAction: PropTypes.func.isRequired,\r\n}"]},"metadata":{},"sourceType":"module"}