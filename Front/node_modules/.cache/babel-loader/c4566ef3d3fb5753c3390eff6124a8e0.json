{"ast":null,"code":"/**\r\n * Module dependencies.\r\n */\nvar parse = require('./profile').parse,\n    util = require('util'),\n    url = require('url'),\n    OAuth2Strategy = require('passport-oauth2'),\n    InternalOAuthError = require('passport-oauth2').InternalOAuthError,\n    VkontakteAuthorizationError = require('./errors/vkontakteauthorizationerror'),\n    VkontakteTokenError = require('./errors/vkontaktetokenerror'),\n    VkontakteAPIError = require('./errors/vkontakteapierror');\n/**\r\n * `Strategy` constructor.\r\n *\r\n * The VK.com authentication strategy authenticates requests by delegating to\r\n * VK.com using the OAuth 2.0 protocol.\r\n *\r\n * Applications must supply a `verify` callback which accepts an `accessToken`,\r\n * `refreshToken` and service-specific `profile`, and then calls the `done`\r\n * callback supplying a `user`, which should be set to `false` if the\r\n * credentials are not valid.  If an exception occured, `err` should be set.\r\n *\r\n * Options:\r\n *   - `clientID`      your VK.com application's App ID\r\n *   - `clientSecret`  your VK.com application's App Secret\r\n *   - `callbackURL`   URL to which VK.com will redirect the user after granting authorization\r\n *   - `profileFields` array of fields to retrieve from VK.com\r\n *   - `apiVersion`    version of VK API to use\r\n *\r\n * Examples:\r\n *\r\n *     passport.use(new VKontakteStrategy({\r\n *         clientID: '123-456-789',\r\n *         clientSecret: 'shhh-its-a-secret'\r\n *         callbackURL: 'https://www.example.net/auth/facebook/callback'\r\n *       },\r\n *       function(accessToken, refreshToken, profile, done) {\r\n *         User.findOrCreate(..., function (err, user) {\r\n *           done(err, user);\r\n *         });\r\n *       }\r\n *     ));\r\n *\r\n * @param {Object} options\r\n * @param {Function} verify\r\n * @api public\r\n */\n\n\nfunction Strategy(options, verify) {\n  options = options || {};\n  options.authorizationURL = options.authorizationURL || 'https://oauth.vk.com/authorize';\n  options.tokenURL = options.tokenURL || 'https://oauth.vk.com/access_token';\n  options.scopeSeparator = options.scopeSeparator || ',';\n  OAuth2Strategy.call(this, options, verify);\n  this.name = 'vkontakte';\n  this._profileURL = options.profileURL || 'https://api.vk.com/method/users.get';\n  this._profileFields = options.profileFields || [];\n  this._apiVersion = options.apiVersion || '5.0';\n}\n/**\r\n * Inherit from `OAuth2Strategy`.\r\n */\n\n\nutil.inherits(Strategy, OAuth2Strategy);\n/**\r\n * Authenticate request by delegating to a service provider using OAuth 2.0.\r\n *\r\n * Since VK.com API is brain-dead and doesn't allow getting user info just\r\n * by its OAuth access token, this method uses a hack around this limitation.\r\n *\r\n * @param {Object} req\r\n * @api protected\r\n */\n\nStrategy.prototype.authenticate = function (req, options) {\n  options = options || {};\n\n  if (req.query && req.query.error) {\n    return this.error(new VkontakteAuthorizationError(req.query.error_description, req.query.error, req.query.error_reason));\n  }\n\n  OAuth2Strategy.prototype.authenticate.call(this, req, options);\n};\n/**\r\n * Return extra parameters to be included in the authorization request.\r\n *\r\n * Options:\r\n *  - `display`  Display mode to render dialog, { `page`, `popup`, `mobile` }.\r\n *\r\n * @param {Object} options\r\n * @return {Object}\r\n * @api protected\r\n */\n\n\nStrategy.prototype.authorizationParams = function (options) {\n  var params = {}; // http://vk.com/dev/auth_mobile\n\n  if (options.display) {\n    params.display = options.display;\n  }\n\n  return params;\n};\n/**\r\n * Retrieve user profile from Vkontakte.\r\n *\r\n * This function constructs a normalized profile, with the following properties:\r\n *\r\n *   - `provider`         always set to `vkontakte`\r\n *   - `id`               the user's VK.com ID\r\n *   - `displayName`      the user's full name\r\n *   - `name.familyName`  the user's last name\r\n *   - `name.givenName`   the user's first name\r\n *   - `gender`           the user's gender: `male` or `female`\r\n *   - `photos`           array of `{ value: 'url' }`\r\n *\r\n * @param {String} accessToken\r\n * @param {Function} done\r\n * @api protected\r\n */\n\n\nStrategy.prototype.userProfile = function (accessToken, done) {\n  var url = this._profileURL;\n  var fields = ['uid', 'first_name', 'last_name', 'screen_name', 'sex', 'photo'];\n\n  this._profileFields.forEach(function (f) {\n    if (fields.indexOf(f) < 0) fields.push(f);\n  });\n\n  url += '?fields=' + fields.join(',') + '&v=' + this._apiVersion + '&https=1';\n\n  this._oauth2.getProtectedResource(url, accessToken, function (err, body, res) {\n    if (err) {\n      return done(new InternalOAuthError('failed to fetch user profile', err));\n    }\n\n    try {\n      var json = JSON.parse(body);\n      if (json.error) throw new VkontakteAPIError(json.error.error_msg, json.error.error_code);\n      json = json.response[0];\n      var profile = parse(json);\n      profile.provider = 'vkontakte';\n      profile._raw = body;\n      profile._json = json;\n      done(null, profile);\n    } catch (e) {\n      done(e);\n    }\n  });\n};\n/**\r\n * Parse error response from Vkontakte OAuth 2.0 token endpoint.\r\n *\r\n * @param {String} body\r\n * @param {Number} status\r\n * @return {Error}\r\n * @api protected\r\n */\n\n\nStrategy.prototype.parseErrorResponse = function (body, status) {\n  var json = JSON.parse(body);\n\n  if (json.error && typeof json.error == 'object') {\n    return new VkontakteTokenError(json.error.error_msg, json.error.error_code);\n  }\n\n  return OAuth2Strategy.prototype.parseErrorResponse.call(this, body, status);\n};\n/**\r\n * Expose `Strategy`.\r\n */\n\n\nmodule.exports = Strategy;","map":null,"metadata":{},"sourceType":"script"}