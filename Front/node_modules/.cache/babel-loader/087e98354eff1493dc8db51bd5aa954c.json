{"ast":null,"code":"// tslint:disable:no-submodule-imports\nimport { NativeModules, Platform } from 'react-native';\nimport resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';\n/**\n * @hidden\n */\n\nconst VKLogin = NativeModules.VkontakteManager;\n/**\n * @hidden\n */\n\nconst VKShare = NativeModules.VkontakteSharing;\n/**\n * React-native wrapper around vk-ios-sdk and vk-android-sdk\n * Provides login and share functionality\n */\n\nexport class VK {\n  /**\n   * Initializes VK SDK from JS code.\n   * You only need to call this once before you call login or logout.\n   * You can skip this call if you've added your VK App ID to your Android's resources or iOS's info.plist.\n   * @param {number|string} vkAppId Your VK app id\n   */\n  static initialize(vkAppId) {\n    VKLogin.initialize(typeof vkAppId === 'number' ? vkAppId : Number(vkAppId));\n  }\n  /**\n   * Opens VK login dialog either via VK mobile app or via WebView (if app is not installed on the device).\n   * If the user is already logged in and has all the requested permissions, then the promise is resolved\n   * straight away, without VK dialog.\n   * @param {string[]} scopesArray array which contains VK access permissions as strings,\n   * e.g. `['friends', 'photos', 'email']`\n   * List of available permissions can be found <a href=\"https://new.vk.com/dev/permissions\">here</a>\n   * @returns {Promise<VKLoginResult>} Promise will be resolved with VKLoginResult object\n   */\n\n\n  static login(scopesArray) {\n    return VKLogin.login(scopesArray);\n  }\n  /**\n   * Performs the logout\n   * @returns {Promise} empty promise\n   */\n\n\n  static logout() {\n    return VKLogin.logout();\n  }\n  /**\n   * Checks if user is already logged in\n   * @returns {Promise<boolean>} Promise that resolves with boolean value\n   */\n\n\n  static isLoggedIn() {\n    return VKLogin.isLoggedIn();\n  }\n  /**\n   * Returns VK access token (if it exists)\n   * @returns {Promise<boolean>} Promise that resolves with VKLoginResult or null\n   */\n\n\n  static getAccessToken() {\n    return VKLogin.getAccessToken();\n  }\n  /**\n   * Opens VK share dialog either via VK mobile app or via WebView (if app is not installed on the device).\n   * Make sure to have correct permissions!\n   * @param {VKShareOptions} options VKShareOptions object\n   * @returns {Promise<number>} Promise that resolves with postId number\n   */\n\n\n  static share(options) {\n    if (options.image) {\n      options.image = resolveAssetSource(options.image).uri;\n    }\n\n    return VKShare.share(options);\n  }\n  /**\n   * **Android only** - helper method to get fingerprints on JS side\n   * @returns {Promise<string[]>} Promise that resolves with array of string fingerprints\n   */\n\n\n  static getCertificateFingerprint() {\n    if (Platform.OS !== 'android') {\n      console.warn('getCertificateFingerprint is for Android only');\n      return Promise.resolve([]);\n    }\n\n    return VKLogin.getCertificateFingerprint();\n  }\n\n}\nexport default VK;","map":null,"metadata":{},"sourceType":"module"}