{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable require-atomic-updates */\nimport logger from 'debug';\nimport ms from 'ms';\nimport { RedisClient } from 'redis';\n\nconst debug = logger('koa-simple-ratelimit');\n\nasync function find(db: RedisClient, p: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    db.get(p, (err, reply) => {\n      if (err) {\n        reject(err);\n      }\n\n      resolve(reply);\n    });\n  });\n}\n\nasync function pttl(db: RedisClient, p: string): Promise<number> {\n  return new Promise((resolve, reject) => {\n    db.pttl(p, (err, reply) => {\n      if (err) {\n        reject(err);\n      }\n\n      resolve(reply);\n    });\n  });\n}\n\nexport type RatelimitExpires = (expires: number) => string;\n\nexport interface RatelimitOptions {\n  /**\n   * database connection\n   */\n  db: any;\n  /**\n   * limit duration in milliseconds [1 hour]\n   */\n  duration?: number;\n  /**\n   * max requests per 'id' default: 2500\n   */\n  max?: number;\n  /**\n   * id to compare requests default: ip\n   */\n  id?: (ctx: any) => any;\n  /**\n   * redis key prefix default: \"limit\"\n   */\n  prefix?: string;\n  /**\n   * array of ids to whitelist\n   */\n  whitelist?: string[];\n  /**\n   * array of ids to blacklist\n   */\n  blacklist?: string[];\n  /**\n   * throw on rate limit exceeded default: false\n   */\n  throw?: boolean;\n  /**\n   * error returned as the body of the response\n   */\n  errorMessage?: string | RatelimitExpires;\n  /**\n   * custom header names\n   */\n  headers?: {\n    /**\n     * remaining number of requests default: 'X-RateLimit-Remaining'\n     */\n    remaining?: string;\n    /**\n     * reset timestamp default: 'X-RateLimit-Reset'\n     */\n    reset?: string;\n    /**\n     * total number of requests default: 'X-RateLimit-Limit'\n     */\n    total?: string;\n  };\n}\n\n/**\n * Initialize ratelimit middleware with the given `opts`\n */\nexport function ratelimit(options: RatelimitOptions) {\n  const opts: Required<RatelimitOptions> = {\n    max: 2500,\n    duration: 3600000,\n    throw: false,\n    prefix: 'limit',\n    id: (ctx: any) => ctx.ip,\n    whitelist: [],\n    blacklist: [],\n    headers: {\n      remaining: 'X-RateLimit-Remaining',\n      reset: 'X-RateLimit-Reset',\n      total: 'X-RateLimit-Limit',\n    },\n    errorMessage: (exp: number) => `Rate limit exceeded, retry in ${ms(exp, { long: true })}.`,\n    ...options,\n  };\n  const {\n    remaining = 'X-RateLimit-Remaining',\n    reset = 'X-RateLimit-Reset',\n    total = 'X-RateLimit-Limit',\n  } = opts.headers || {};\n\n  return async function (ctx, next) {\n    const id = opts.id(ctx);\n\n    if (id === false) {\n      return next();\n    }\n\n    // Whitelist\n    if (opts.whitelist && opts.whitelist.includes(id)) {\n      return next();\n    }\n\n    // Blacklist\n    if (opts.blacklist && opts.blacklist.includes(id)) {\n      return ctx.throw(403);\n    }\n\n    const prefix = opts.prefix ? opts.prefix : 'limit';\n    const name = `${prefix}:${id}:count`;\n    const cur = await find(opts.db, name);\n    const n = Math.floor(Number(cur));\n    let t = Date.now();\n    t += opts.duration;\n    t = new Date(t).getTime() / 1000 || 0;\n\n    const headers = {\n      [remaining]: opts.max - 1,\n      [reset]: t,\n      [total]: opts.max,\n    };\n    ctx.set(headers);\n\n    // Not existing in redis\n    if (cur === null) {\n      opts.db.set(name, opts.max - 1, 'PX', opts.duration, 'NX');\n      debug('remaining %s/%s %s', opts.max - 1, opts.max, id);\n      return next();\n    }\n\n    const expires = await pttl(opts.db, name);\n    if (n - 1 >= 0) {\n      // Existing in redis\n      opts.db.decr(name);\n      ctx.set(remaining, n - 1);\n      debug('remaining %s/%s %s', n - 1, opts.max, id);\n      return next();\n    }\n\n    if (expires < 0) {\n      debug(`${name} is stuck. Resetting.`);\n      opts.db.set(name, opts.max - 1, 'PX', opts.duration, 'NX');\n      return next();\n    }\n\n    // User maxed\n    debug('remaining %s/%s %s', remaining, opts.max, id);\n    ctx.set(remaining, n);\n    ctx.set('Retry-After', t);\n    ctx.status = 429;\n    if (typeof opts.errorMessage === 'function') {\n      ctx.body = opts.errorMessage(expires);\n    } else {\n      ctx.body = opts.errorMessage;\n    }\n\n    if (opts.throw) {\n      ctx.throw(ctx.status, ctx.body, { headers });\n    }\n  };\n}\n"]}